/*
  Проект "Металлический робот"
  Автор
    Зубр ОВК
  Описание
    Скрипт, с помощью которого выполняется переключение режимов работы движков.

    Каждый движок содержит несколько типов регуляторов. Параметр с индексом 4 отвечает за то,
    какой конкретный регулятор будет использован для работы. В настоящее время доступны
    следующие виды регуляторов:
     код    описание
      0  ШИМ-регулятор. Значения, которые поступают с командами управления интепретируются как заданный шим
         и направляются непосредственно на ШИМ-формирователь.
      1  Регулятор позиции по углу. Это основной режим, в котором осуществляется регулировка позиции двигателя.
         Значения, которые поступают с командами управления интерпретируются как заданный угол. Регулятор обеспечивает
         движение к этому углу, а затем удержание этого угла.
      5  специальный регулятор для калибровки с помощью компьютера и образцового движка. Сейчас не используется
         из-за внедрения более скоростного и точного автономного тестера-калибровщика.
      7  движок назначается подчиненным устройством и следует ШИМ-заданиям мастер-движка. Входящий ШИМ прямо подается
         на ШИМ-формирователь.
      8  движок назначается подчиненным устройством и следует ШИМ-заданиям мастер-движка. Входящий ШИМ ИНВЕРТИРУЕТСЯ,
         а затем подается на ШИМ-формирователь. Вместе с режимом 7 обеспечивают любую установку подчиненного движка
      9  Регулятор позиции по углу с простой PD-формулой регулирования. Используется для RL.

    В данном скрипте представлены функции, которые позволяют изменить режим одного или нескольких движков.

*/
#include <roki2met.h>

//Используется для изменения режима одного движка
// motorIndex - индекс мотора в конфигурации
// mode       - код режима из описания в начале
//Возвращает 1, если переключение произведено успешно или 0 в противном случае
int changeMotorMode( int motorIndex, int mode ) {
  //Получить текущий режим
  int prevMode;
  //Прочитаем текущий режим мотора
  if( sfUnitParamRead( motorIndex, 4, &prevMode ) ) {
    if( prevMode != mode ) {
      //Если текущий режим не соответствует требуемому, то перешиваем
      if( sfUnitParamQueryWrite( motorIndex, 4, mode ) ) {
        sfWaitNextFrame();
        sfWaitNextFrame();
        //Режим записан, проверим как записалось
        if( sfUnitParamRead( motorIndex, 4, &prevMode ) && prevMode == mode ) 
          return 1;
        }
      }
    //Текущий режим уже соответствует заданному, ничего больше не делаем
    else return 1;
    }
  return 0;
  }


//Используется для изменения режима нескольких движков
// motorMask     - маска движков, режим которых нужно изменить
// mode          - код режима из описания в начале
// failMotorMask - маска движков, для которых не удалось изменить режим
void changeMotorsMode( int motorMask, int mode, int *failMotorMask ) {
  int motorIndex;
  //Предполагаем, что все движки будут переключены успешно
  *failMotorMask = 0;
  //Перебираем движки
  for( motorIndex = 0; motorIndex < 31; motorIndex++ ) {
    //Если движок попадает в маску, то меняем его режим
    if( motorMask & (1 << motorIndex) ) {
      if( !changeMotorMode( motorIndex, mode ) ) {
        //Если изменить режим движка не удалось, то добавляем его в выходную маску
        *failMotorMask |= (1 << motorIndex);
        }
      }
    }
  }


int failMotorMask;

void main() {
  changeMotorsMode( MASK_LEFT_ELBOW | MASK_LEFT_CLAVICLE, 1, &failMotorMask );
  sfStop();
  }